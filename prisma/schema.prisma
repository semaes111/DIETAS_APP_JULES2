// Supabase-optimized Prisma schema
// This schema is specifically configured for Supabase PostgreSQL deployment

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// NextAuth.js Models - Optimized for Supabase
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  isAdmin       Boolean   @default(false) @map("is_admin")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // User Profile Information
  profile       UserProfile?
  accounts      Account[]
  sessions      Session[]
  mealPlans     MealPlan[]
  progressLogs  ProgressLog[]
  recipes       Recipe[]
  shoppingLists ShoppingList[]
  userMeals     UserMeal[]

  @@index([email])
  @@index([createdAt])
  @@index([isAdmin])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// User Profile Model - Optimized for Supabase
model UserProfile {
  id                  String        @id @default(cuid())
  userId              String        @unique @map("user_id")
  age                 Int?
  gender              Gender?
  height              Float? // in cm
  weight              Float? // in kg
  activityLevel       ActivityLevel @default(SEDENTARY) @map("activity_level")
  goal                Goal          @default(MAINTAIN)
  dietaryRestrictions String?       @db.Text @map("dietary_restrictions") // JSON string
  healthConditions    String?       @db.Text @map("health_conditions") // JSON string
  bmr                 Float?
  tdee                Float?
  targetCalories      Int?          @map("target_calories")
  targetProtein       Int?          @map("target_protein")
  targetCarbs         Int?          @map("target_carbs")
  targetFat           Int?          @map("target_fat")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Food Database Models - Optimized for Supabase
model Food {
  id              String @id @default(cuid())
  name            String
  brand           String?
  barcode         String? @unique
  description     String? @db.Text
  category        String
  servingSize     Float   @map("serving_size") // in grams
  caloriesPer100g Float   @map("calories_per_100g")
  proteinPer100g  Float   @map("protein_per_100g")
  carbsPer100g    Float   @map("carbs_per_100g")
  fatPer100g      Float   @map("fat_per_100g")
  fiberPer100g    Float?  @map("fiber_per_100g")
  sugarPer100g    Float?  @map("sugar_per_100g")
  sodiumPer100g   Float?  @map("sodium_per_100g")
  isVerified      Boolean @default(false) @map("is_verified")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  mealItems         MealItem[]
  userMeals         UserMeal[]
  recipeIngredients RecipeIngredient[]

  @@index([name])
  @@index([category])
  @@index([isVerified])
  @@index([createdAt])
  @@map("foods")
}

// Meal Planning Models - Optimized for Supabase
model MealPlan {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  isActive  Boolean  @default(false) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  meals Meal[]

  @@index([userId])
  @@index([isActive])
  @@index([startDate, endDate])
  @@map("meal_plans")
}

model Meal {
  id         String   @id @default(cuid())
  mealPlanId String   @map("meal_plan_id")
  date       DateTime
  type       String
  name       String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  mealPlan  MealPlan   @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  mealItems MealItem[]

  @@map("meals")
}

model MealItem {
  id       String @id @default(cuid())
  mealId   String @map("meal_id")
  foodId   String @map("food_id")
  quantity Float  // in grams
  calories Float
  protein  Float
  carbs    Float
  fat      Float

  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@map("meal_items")
}

// User Daily Meals (Actual consumed meals) - Optimized for Supabase
model UserMeal {
  id       String   @id @default(cuid())
  userId   String   @map("user_id")
  foodId   String   @map("food_id")
  date     DateTime
  mealType MealType @map("meal_type")
  quantity Float    // in grams
  calories Float
  protein  Float
  carbs    Float
  fat      Float
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([mealType])
  @@index([userId, date])
  @@map("user_meals")
}

// Recipe Models - Optimized for Supabase
model Recipe {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  name         String
  description  String?  @db.Text
  instructions String   @db.Text
  servings     Int
  prepTime     Int?     @map("prep_time") // in minutes
  cookTime     Int?     @map("cook_time") // in minutes
  difficulty   String?
  category     String?
  image        String?
  isPublic     Boolean  @default(false) @map("is_public")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  ingredients RecipeIngredient[]
  nutrition   RecipeNutrition?

  @@map("recipes")
}

model RecipeIngredient {
  id       String @id @default(cuid())
  recipeId String @map("recipe_id")
  foodId   String @map("food_id")
  quantity Float  // in grams
  notes    String? @db.Text

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@map("recipe_ingredients")
}

model RecipeNutrition {
  id            String @id @default(cuid())
  recipeId      String @unique @map("recipe_id")
  caloriesTotal Float  @map("calories_total")
  proteinTotal  Float  @map("protein_total")
  carbsTotal    Float  @map("carbs_total")
  fatTotal      Float  @map("fat_total")
  fiberTotal    Float? @map("fiber_total")
  sugarTotal    Float? @map("sugar_total")
  sodiumTotal   Float? @map("sodium_total")

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("recipe_nutrition")
}

// Progress Tracking Models - Optimized for Supabase
model ProgressLog {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  date        DateTime
  weight      Float?   // in kg
  bodyFat     Float?   @map("body_fat") // percentage
  muscleMass  Float?   @map("muscle_mass") // in kg
  waist       Float?   // in cm
  chest       Float?   // in cm
  hips        Float?   // in cm
  notes       String?  @db.Text
  mood        Int?     // 1-5 scale
  energyLevel Int?     @map("energy_level") // 1-5 scale
  sleepHours  Float?   @map("sleep_hours")
  waterIntake Float?   @map("water_intake") // in liters
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([userId, date])
  @@map("progress_logs")
}

// Shopping List Models - Optimized for Supabase
model ShoppingList {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  name        String
  date        DateTime  @default(now())
  isCompleted Boolean   @default(false) @map("is_completed")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  items ShoppingListItem[]

  @@map("shopping_lists")
}

model ShoppingListItem {
  id             String  @id @default(cuid())
  shoppingListId String  @map("shopping_list_id")
  name           String
  category       String?
  quantity       Float?
  unit           String?
  isCompleted    Boolean @default(false) @map("is_completed")
  notes          String? @db.Text

  shoppingList ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)

  @@map("shopping_list_items")
}

// Enums for PostgreSQL - Optimized for Supabase
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ActivityLevel {
  SEDENTARY
  LIGHTLY_ACTIVE
  MODERATELY_ACTIVE
  VERY_ACTIVE
  EXTREMELY_ACTIVE
}

enum Goal {
  LOSE
  MAINTAIN
  GAIN
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}